var _, blockElement, entities, inlineElement, libxmljs, recursiveWalk, smartTrim, toMarkdown;

libxmljs = require('libxmljs');

entities = require('entities');

_ = require('underscore');

smartTrim = function(str) {
  str = str.replace(/^\s+/g, ' ');
  return str = str.replace(/\s+$/g, ' ');
};

blockElement = function(str) {
  if (str.length) {
    str = (str.trim()) + "\n";
  }
  return str;
};

inlineElement = function(str) {
  str = str.trim();
  if (str.length) {
    str = str + " ";
  }
  return str;
};

recursiveWalk = function(node) {
  var child, childNodes, content, href, ref, ref1, text;
  switch (node.type()) {
    case 'text':
      return inlineElement(node.toString());
    case 'comment':
      return '';
    case 'entity_ref':
      return entities.decodeHTML(node.toString());
    case 'element':
      childNodes = (function() {
        var i, len, ref, results;
        ref = node.childNodes();
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          child = ref[i];
          results.push(recursiveWalk(child));
        }
        return results;
      })();
      content = childNodes.join('');
      switch (node.name()) {
        case 'li':
          return "* " + content + "\n";
        case 'i':
        case 'em':
          return "*" + content + "*";
        case 'b':
        case 'strong':
          return "**" + content + "**";
        case 'h1':
          return "# " + content + "\n\n";
        case 'h2':
          return "## " + content + "\n\n";
        case 'h3':
          return "### " + content + "\n";
        case 'h4':
          return "#### " + content + "\n";
        case 'h5':
          return "##### " + content + "\n";
        case 'h6':
          return "###### " + content + "\n";
        case 'a':
          text = content.trim();
          href = (ref = node.attr('href')) != null ? (ref1 = ref.value()) != null ? ref1.trim() : void 0 : void 0;
          return "[" + text + "](" + href + ")";
        case 'br':
          return '\n';
        case 'en-note':
        case 'div':
        case 'ol':
        case 'ul':
        case 'p':
          return blockElement(content);
        case 'en-todo':
          return " - [" + (node.attr('checked') ? 'x' : ' ') + "] ";
        default:
          return content;
      }
      break;
    default:
      throw Error("no rule to parse " + node);
  }
};

toMarkdown = function(content) {
  var xmlDoc = libxmljs.parseXml(content);
  return recursiveWalk(xmlDoc.root());
};

module.exports = {
  toMarkdown: toMarkdown
};

// ---
// generated by coffee-script 1.9.2
